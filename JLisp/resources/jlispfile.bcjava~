; public class JLisp extends Object { ...}
.class public JLisp
.super java/lang/Object

; public JLisp() { super(); } // calls java.lang.Object()
.method public <init>()V
   .limit stack 1
   .limit locals 1
   aload_0
   invokespecial java/lang/Object/<init>()V
   return
.end method

; main()
.method public static main([Ljava/lang/String;)V
   .limit stack 7 ; how much stack space do we need?
   .limit locals 5 ; how many locals do we need?
   ; code translated from input stream
         ldc 0 
         istore 1  ; this will hold our final integer
     Label1: 
         getstatic java/lang/System/in Ljava/io/InputStream; 
         invokevirtual java/io/InputStream/read()I 
         istore 2 
         iload 2 
         ldc 10   ; the newline delimiter LF
         isub 
         ifeq Label2 
         iload 2 
         ldc 32   ; the space delimiter 
         isub 
         ifeq Label2 
         iload 2 
         ldc 13   ; the Carriage return CR
         isub 
         ifeq Label2 
         iload 2 
         ldc 48   ; we have our digit in ASCII, have to subtract it from 48 
         isub 
         ldc 10 
         iload 1
         imul
         iadd 
         istore 1 
         goto Label1 
     Label2: 
         iload 1
     istore 3 ; a
    Label8:
     iload 3 ; a
     ldc 2
    if_icmplt Label3
    ldc 0
    goto Label4
    Label3:
    ldc 1
    Label4:
    iconst_0
    if_icmpeq Label7
    goto Label5
    goto Label6
    Label7:
      iload 3 ; a
      iload 3 ; a
      ldc 1
     isub
     imul
     istore 4 ; b
    Label6:
      iload 3 ; a
      ldc 1
     isub
     istore 3 ; a
    goto Label8
    Label5:
      iload 4 ; b
     getstatic java/lang/System.out Ljava/io/PrintStream;
     swap  
     invokevirtual java/io/PrintStream.println(I)V
   return
.end method